ТЗ фронт админка
Страницы:


1) Страница “Пользователи”:


1. Страница состоит из таблицы пользователей:
Cтолбцы: 
* Идентификатор - id
* Аватар(картинкой) - avatar
* Имя - first_name
* Фамилия - last_name
* Почта - email
* Пароль - password
* Дата рождения - date_of_birthday
* Пол - gender
* Операционная система - os(choice field: IOS, Android или null)
* Активный - is_active
* Менеджер - is_staff
* Права доступа - user_permissions
* Дата создания аккаунта - date_joined




2. Должна быть возможность редактировать поля, создавать и удалять пользователя(при редактировании прав доступа должен быть список прав. Присвоение и изымание у пользователя прав происходит посредством отметки их например галочкой).




3. Должен быть реализован поиск.


4. Методы:
* Получение пользователей - GET /api/admin/profile/ или GET /api/admin/profile/?search={query} для поиска.
* Создание пользователя - POST /api/admin/profile/
* Редактирование пользователя - PUT/PATCH /api/admin/profile/{id}/
* Удаление пользователя - DELETE /api/admin/profile/{id}/
* Получение всех прав доступа - GET /api/admin/permissions/


2) Страница “Баллы”
1. Страница состоит из таблицы пользователей.
Столбцы:
* Идентификатор - id
* Почтаl - email
* Телефон - phone
* Всего баллов - total_points


2. Поиск по пользователям


3. В самом верху страницы таблица “Начисления баллов”.
Стобцы:
* Название - name
* Значение - value




4. В таблице начисления должна быть возможность редактировать все поля.
 


5. При нажатии на строку таблицы пользователей раскрывается список с историей пополнений и трат баллов.
Столбцы:
* Идентификатор - id
* Баллы - points
* Текст - text
* Операция - charge(если True пишем красными буквами “Списание”, если False зелеными “Начисление”)
* Дата - created_at






6. Можем ТОЛЬКО создавать начисления/списания баллов(сделать в этом списке который раскрывается)




7. Методы:
* Получение пользователей вместе с операциями по баллам - GET /api/admin/point/ или GET /api/admin/point/?search={query} для поиска по пользователям
* Создание операции  - POST /api/admin/point
* Получение конфига начисления баллов GET /api/admin/point/config/
* Редактирование конфига начисления баллов PUT/PATCH /api/admin/point/config/{id}/




3) Страница “Реферальная система”
1. Состоит из таблицы реферальных кодов.
Столбцы:
* Идентификатор - id
* Код - code
* Применений кода - code_applying
* Идентификатор владельца кода - user


2. Поиск по пользователям.


3. Возможно редактирование, создание и удаление кодов(возможно отредактировать только поле “Код”)


4. Методы:
* Получение реферальных кодов вместе с пользователем - GET /api/admin/referral или GET /api/admin/referral/?search={query} для поиска по пользователям
* Создание реферального кода - POST /api/admin/referral/
* Редактирование - PUT/PATCH /api/admin/referral/{id}/
* Удаление - DELETE /api/admin/referral/{id}/


4) Страница “Промокоды”
1. Состоит из таблицы промокоды.
Столбцы:
* Идентификатор - id
* Название - name
* Описание - description
* Ссылка - links
* Цена - cost
* Сколько раз приобретен - how_much_purchased




2. Также как и на странице с баллами при нажатии на строку раскрывается список с покупками этого промокода
Столбцы:
* Идентификатор покупки - id
* Идентификатор пользователя - user
* Дата покупки - purchased_at




3. Реализовать поиск по имени и описанию промокода(главная таблица)


4. Поиск по дате покупки и айди пользователя(разворачивающийся список)


5. Можем создавать, редактировать и удалять промокоды.
6. Можем создавать и удалять купленные промокоды
.


7. Методы:
* Получение всех промокодов - GET /api/admin/promo/ или GET /api/admin/promo/?search={query} для поиска по имени и описанию.
* Создание промокода - POST /api/admin/promo/
* Редактирование промокода - PUT/PATCH /api/admin/promo/{id}/
* Удаление промокода - DELETE /api/admin/promo/{id}/
* Получение всех покупок промокода - 
GET /api/admin/promo/purchased/?promo={promo_id} или 
GET /api/admin/promo/{id}/purchased/?promo={promo_id}&search={query} для поиска по пользователю или дате покупки
* Создание купленного промокода - 
POST /api/admin/promo/purchased/
* Удаление купленного промокода -  
DELETE /api/admin/promo/purchased/{id}/




5) Страница “Реклама”
1. Состоит из таблицы рекламные публикации
Столбцы:
* Идентификатор - id
* Фото - image
* Заголовок - title
* Описание - description
* Таргет - target_audience(choice поле: Все, Мужчина, Женщина)
* Ссылка - url


2. Возможен поиск по полям заголовок и описание.


3. Можем выполнять все crud операции над рекламной публикацией.


4. Методы:
* Получение всех рекламных публикаций - GET /api/admin/ads/(?search={query} для поиска)
* Создание - POST  /api/admin/ads/
* Редактирование - PUT/PATCH  /api/admin/ads/{id}/
* Удаление - DELETE  /api/admin/ads/{id}/




6) Страница “Рассылки”
1. Состоит из таблицы рассылки
Столбцы:
* Идентификатор - id
* Заголовок - title
* Описание - description
* Заголовок на английском - title_eng
* Описание на английском - description_eng
* Ссылка - url


2. Возможен поиск по полям заголовок и описание.


3. Можем выполнять все crud операции над рассылкой.


4. Методы:
* Получение - GET /api/admin/mailing/(?search={query} для поиска)
* Создание - POST  /api/admin/mailing/
* Редактирование - PUT/PATCH  /api/admin/mailing/{id}/
* Удаление - DELETE  /api/admin/mailing/{id}/


7) Страница “FAQ”
1. Состоит из таблицы FAQ
Столбцы:
* Идентификатор - id
* Вопрос - question
* Ответ - answer


2. Возможен поиск по всем полям.


3. Можем выполнять все crud операции над вопросом.


4. Методы:
* Получение - GET /api/admin/FAQ/(?search={query} для поиска)
* Создание - POST  /api/admin/FAQ/
* Редактирование - PUT/PATCH  /api/admin/FAQ/{id}/
* Удаление - DELETE  /api/admin/FAQ/{id}/


8) Страница “Тикеты”
1. Страница состоит из 2 вкладок с открытыми тикетами и закрытыми.


2. Вкладки представляют собой списки тикетов со следующими полями:


3. Получение тикетов:
* GET /api/admin/sup/ (?search={query} для поиска)


4. У каждого тикета должна быть кнопка “закрыть тикет”(меняем статус тикета на close):
* PATCH /api/admin/sup/{id}/




5. При нажатии на тикет открывается чат с пользователем. В чате должна быть видна id, почта и аватарка пользователя. Должна быть возможность отправлять сообщения:
* /ws/support/?user_id={user_id}&ticket_id={ticket_id}
* Отправка сообщения
{user_id: user_id, message: message} 




9) Страница “Статистика”
1. На этой странице должно отображаться:
* Общее количество рецептов
* Количество рецептов на русском языке
* Количество рецептов на английском языке 
* Количество пользователей
* Количество пользователей на ios
* Количество пользователей на android


2. Метод получения статистики - GET /api/admin/statistics/






Общая информация:
1. Там где при создании или редактировании записи необходимо указать пользователя делаем выпадающий список всех пользователей с их айди, почтой и номером телефона с возможностью поиска.


2. Там где есть поле айди пользователя по нему можно кликнуть и нас перенесет на страницу с профилями где в таблице будет только этот пользователь(метод получения 1 пользователя есть в свагере)


3. На все картинки можно кликнуть и они будут увеличены.


4. Необходимо упаковать в докер контейнер для продакшн среды(без веб сервера).
Порт 3000.


5. Дизайн произвольный, просто чтобы выглядело адекватно. Вроде как в файле с проектом какие то компоненты написаны. Короче на твое усмотрение.







10) Страница “Инструменты”
Такая же таблица как и везде с возможностью создания, редактирования и удаления инструментов:
Идентификатор - id
Фото - photo
Язык - language(choice field ENG ИЛИ RUS)
Название - name
Описание - description
История - history
Как использовать - how_to_use
Ссылки - links - Поле список(может быть несколько ссылок, должна быть возможность добавлять, редактировать и удалять их)

Поиск

Сделать сортировку по по полям id, name и description

Методы:
Получение инструментов - GET /api/admin/tool/ или GET /api/admin/tool/?search={query} для поиска.
Создание инструмента - POST /api/admin/tool/
Редактирование инструмента - PUT/PATCH /api/admin/tool/{id}/
Удаление инструмента - DELETE /api/admin/tool/{id}/


11) Страница “Ингредиенты”
Таблица с блоками категорий:
Таблица с блоками категорий. Должна быть возможность редактировать только столбец categories(добавлять и удалять категории). Добавлять категории в столбец categories можно с помощью выпадающего списка категорий где мы выбираем нужные варианты(реализовать в этом списке поиск по айди и названию). Удалять и создавать блоки категорий нельзя. 

Столбцы:
Идентификатор - id
Название - name
Язык - language(choice field ENG ИЛИ RUS)
Категории - categories(состоит из 2х полей id и name). 

Методы:
Получение блоков категорий - GET /api/admin/ingredient/category-section/
Редактирование - PUT /api/admin/ingredient/category-section/{id}/

Таблица категорий:
Есть возможность удалять редактировать и создавать категории.

Столбцы:
Идентификатор - id
Название - name
Язык -  language(choice field ENG ИЛИ RUS)
Основная? - is_main
Алкогольный? - is_alcoholic

Поиск

Сортировка по полям name language и id

Методы:
Получение категории - GET /api/admin/ingredient/category/
Создание Категории - POST /api/admin/ingredient/category/
Редактирование категории - PUT/PATCH /api/admin/ingredient/category/{id}/
Удаление категории - DELETE /api/admin/ingredient/category/{id}/

Таблица ингредиентов:
Есть возможность создавать редактировать и удалять ингредиенты. Столбец категория можно редактировать с помощью выпадающего списка где также приведены все категории и мы можем выбрать 1 из них(также нужен поиск).

Столбцы:
Идентификатор - id
Язык - language(choice field ENG ИЛИ RUS)
Название - name
Описание - description
Категория - состоит из category и category_name
Алкогольный? - is_alcoholic

Поиск

Сортировка по названию описанию языку и айди

Методы:
Получение ингредиентов - GET /api/admin/ingredient/
Создание ингредиентов - POST /api/admin/ingredient/
Редактирование ингредиентов - PUT/PATCH /api/admin/ingredient/{id}/
Удаление ингредиентов - DELETE /api/admin/ingredient/{id}/



12)Страница “Рецепты”
Страница состоит из таблицы “Рецепты”. Эта таблица разделена на 3 вкладки: На модерации, одобрены и отклонены. 
Столбцы таблицы:
Id - id
Фото - image
Язык - language 
Название - title
Описание - description
Статус - status
Доступен? - isEnabled
Алкогольный? - is_alcoholic
Создатель рецепта - user
Добавлений в избранное - favorites_count
Видео - video_url
Инструкция - instruction(это поле состоит из шагов приготовления, должна быть возможность редактировать, удалять и добавлять шаги приготовления с автоматическим изменением шагов приготовления, если допустим какой то шаг удалили все остальные должны сместиться на 1)
Инструменты - tools(Поле состоит из инструментов, а они в свою очереди из id и названия. При редактировании должна быть возможность выбрать из списка с поиском инструмент и добавить его. Также можно удалять инструменты из списка)
Ингредиенты - ingredients(состоит из ingredients.ingredient - id ингредиента, ingredients.name - названия ингредиента, ingredients.type - мера и ingredients.quantity - количество. Должна быть возможность добавлять(это происходит посредством выбора ингредиента из списка ингредиентов с возможность поиска, также из списка с мерами выбираем меру и вводится количество ингредиента), редактировать(можно менять каждый из параметров: ингредиент, мера, количество) и удалять ингредиенты из списка)

На вкладке на модерации должны быть кнопки одобрить и отклонить рецепт. При нажатии на кнопку одобрить параметр status меняется на Approved, когда нажимаем на отклонить статус меняется на Rejected. 

На вкладке одобрено должна быть кнопка отклонить которая меняет статус на Rejected. СОЗДАТЬ и УДАЛИТЬ РЕЦЕПТ МОЖНО ТОЛЬКО ЗДЕСЬ. РЕЦЕПТ СОЗДАЕТСЯ СО СТАТУСОМ APPROVED.

На вкладке отклонены должна быть кнопка одобрить, которая меняет статус рецепта на Approved.

Редактировать рецепты можно на всех вкладках.
Реализовать поиск.

Сортировка по полям title, video_url, favorites_count, is_alcoholic, language.

Методы:
Получение рецептов на модерации - GET /api/admin/recipe/pending/
Редактирование рецептов на модерации - PUT/PATCH /api/admin/recipe/pending/{id}/
Получение одобренных рецептов - GET /api/admin/recipe/approved/
Создание рецептов - POST /api/admin/recipe/approved/
Редактирование одобренных рецептов - PUT/PATCH /api/admin/recipe/pending/{id}/
Удаление рецептов - DELETE /api/admin/recipe/approved/{id}/
Получение отклоненных рецептов - GET /api/admin/recipe/rejected/
Редактирование отклоненных рецептов - PUT/PATCH /api/admin/recipe/rejected/{id}/

Варианты мер:
('ounce', 'унция'),
('ml', 'мл'),
('gram', 'грамм'),
('piece', 'шт'),
('spoon', 'ложка'),
('cup', 'кружка'),
('tablespoon', 'столовая ложка'),
('teaspoon', 'чайная ложка'),
('slice', 'ломтик'),
('twist', 'твист'),
('cube', 'кубик'),
('sprig', 'веточка'),
('pinch', 'щепотка'),
('spiral', 'спираль'),
('wedge', 'долька'),
('dash', 'дэш'),
('block', 'блок'),
('circle', 'кружок'),
('bottle', 'бутылка'),
